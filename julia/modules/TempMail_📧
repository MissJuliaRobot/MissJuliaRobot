from tempmail import TempMail
import time
from julia import *
from julia.events import register
from pymongo import MongoClient
from telethon import types, events
from telethon.tl import *
from telethon.tl.types import *
from telegraph import Telegraph

client = MongoClient(MONGO_DB_URI)
db = client["missjuliarobot"]
tmail = db.tempmail

tm = TempMail()
api_host = 'privatix-temp-mail-v1.p.rapidapi.com'
api_key=TEMP_MAIL_KEY
tm.set_header(api_host,api_key)

def get_email(id):
    return tmail.find_one({"user": id})

@register(pattern="^/newmail$")
async def _(event):
    if not event.is_private:
       await event.reply("You can only use this service in PM!")
       return
    gmail = tmail.find({})
    for c in gmail:
        if event.sender_id == c["user"]:
           addr = get_email(event.sender_id)
           ttime = addr["time"]

    ttime = time.time()
    email = tm.get_email_address()
    hash = tm.get_hash(email)
    tmail.insert_one({"user": event.sender_id, "time": ttime, "email": email, "hash": hash})
    await event.reply(f"You have successfully registered your account !\nYour temporary email is: {email}")


@register(pattern="^/mymail$")
async def _(event):
    if not event.is_private:
       await event.reply("You can only use this service in PM!")
       return   
    gmail = tmail.find({})
    for c in gmail:
        if event.sender_id == c["user"]:
           addr = get_email(event.sender_id)
           addrs = addr["email"]
           await event.reply(f"Your current email address is:\n{addrs})
           return
        await event.reply("You don't have any email address associated with your account, get one with /newmail")

@register(pattern="^/checkinbox$")
async def _(event):
    if not event.is_private:
       await event.reply("You can only use this service in PM!")
       return   
    gmail = tmail.find({})
    for c in gmail:
        if not event.sender_id == c["user"]:
           await event.reply("You don't have any email address associated with your account, get one with /newmail")
           return
    addr = get_email(event.sender_id)
    email = addr["email"]
    hash = addr["hash"]
    mails = get_mailbox(email=email, email_hash=hash)
    for key, value in mails.items():
        if value == "There are no emails yet":
           await event.reply('There are no emails yet')
           return
    for i in mails:
        from = i['mail_from']
        subject =i['mail_subject']
        time = i[]
    
    telegraph = Telegraph()
    telegraph.create_account(short_name='MissJuliaRobot')
    if subject == "":
       subject = "No Subject"

    headers = "**FROM**: {from}\n**TO**: {email}\n**DATE"**: {time}\n\n"
    
    response = telegraph.create_page(
               subject, 
               html_content=final)
    print('https://telegra.ph/{}'.format(response['path']))


__help__ = """
 - /neemail: Registers your account for a new email address
 - /myaddress: Gives your current email address
 - /checkinbox: Checks the inbox associated with the account for new emails
"""
